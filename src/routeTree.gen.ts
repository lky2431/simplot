/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocStylingImport } from './routes/doc.styling'
import { Route as DocStartImport } from './routes/doc.start'
import { Route as DocConceptImport } from './routes/doc.concept'
import { Route as DocAllImport } from './routes/doc.all'
import { Route as DocAdvancedImport } from './routes/doc.advanced'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const DashboardLazyImport = createFileRoute('/dashboard')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const EditorEditorIdLazyImport = createFileRoute('/editor/$editorId')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const DashboardLazyRoute = DashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const EditorEditorIdLazyRoute = EditorEditorIdLazyImport.update({
  path: '/editor/$editorId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/editor.$editorId.lazy').then((d) => d.Route),
)

const DocStylingRoute = DocStylingImport.update({
  path: '/doc/styling',
  getParentRoute: () => rootRoute,
} as any)

const DocStartRoute = DocStartImport.update({
  path: '/doc/start',
  getParentRoute: () => rootRoute,
} as any)

const DocConceptRoute = DocConceptImport.update({
  path: '/doc/concept',
  getParentRoute: () => rootRoute,
} as any)

const DocAllRoute = DocAllImport.update({
  path: '/doc/all',
  getParentRoute: () => rootRoute,
} as any)

const DocAdvancedRoute = DocAdvancedImport.update({
  path: '/doc/advanced',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/doc/advanced': {
      id: '/doc/advanced'
      path: '/doc/advanced'
      fullPath: '/doc/advanced'
      preLoaderRoute: typeof DocAdvancedImport
      parentRoute: typeof rootRoute
    }
    '/doc/all': {
      id: '/doc/all'
      path: '/doc/all'
      fullPath: '/doc/all'
      preLoaderRoute: typeof DocAllImport
      parentRoute: typeof rootRoute
    }
    '/doc/concept': {
      id: '/doc/concept'
      path: '/doc/concept'
      fullPath: '/doc/concept'
      preLoaderRoute: typeof DocConceptImport
      parentRoute: typeof rootRoute
    }
    '/doc/start': {
      id: '/doc/start'
      path: '/doc/start'
      fullPath: '/doc/start'
      preLoaderRoute: typeof DocStartImport
      parentRoute: typeof rootRoute
    }
    '/doc/styling': {
      id: '/doc/styling'
      path: '/doc/styling'
      fullPath: '/doc/styling'
      preLoaderRoute: typeof DocStylingImport
      parentRoute: typeof rootRoute
    }
    '/editor/$editorId': {
      id: '/editor/$editorId'
      path: '/editor/$editorId'
      fullPath: '/editor/$editorId'
      preLoaderRoute: typeof EditorEditorIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  DashboardLazyRoute,
  LoginLazyRoute,
  DocAdvancedRoute,
  DocAllRoute,
  DocConceptRoute,
  DocStartRoute,
  DocStylingRoute,
  EditorEditorIdLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/dashboard",
        "/login",
        "/doc/advanced",
        "/doc/all",
        "/doc/concept",
        "/doc/start",
        "/doc/styling",
        "/editor/$editorId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/doc/advanced": {
      "filePath": "doc.advanced.tsx"
    },
    "/doc/all": {
      "filePath": "doc.all.tsx"
    },
    "/doc/concept": {
      "filePath": "doc.concept.tsx"
    },
    "/doc/start": {
      "filePath": "doc.start.tsx"
    },
    "/doc/styling": {
      "filePath": "doc.styling.tsx"
    },
    "/editor/$editorId": {
      "filePath": "editor.$editorId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
